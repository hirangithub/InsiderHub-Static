'use client';

import { useState, useEffect } from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';
import LeftBar from "@/components/LeftBar";
import { Layout, Button, Avatar, Drawer, Dropdown, Space } from 'antd';
import { Content } from "antd/es/layout/layout";
import Sider from "antd/es/layout/Sider";
import Image from "next/image";
import { ConfigProvider } from 'antd';
import theme from './styles/theme.config';
import 'normalize.css'; // CSS reset
import "./styles/theme.scss";

import {
  UserOutlined,
  MenuOutlined,
  CloseOutlined,
} from '@ant-design/icons';

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const handleMenuClick = (e) => {
  message.info('Click on menu item.');
  console.log('click', e);
};

const items = [
  {
    label: 'View profile',
    key: '1',
  },
  {
    label: 'Account settings',
    key: '2',
  },
  {
    label: 'Subscription/Plan',
    key: '3',
  },
  {
    label: 'Support',
    key: '4',
  },
  {
    type: 'divider',
  },
  {
    label: 'Sign out',
    key: '5',
  },
];

const menuProps = {
  items,
  onClick: handleMenuClick,
};

export default function RootLayout({ children }) {

  const [collapsed, setCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [drawerVisible, setDrawerVisible] = useState(false);
  const [dropdownVisible, setDropdownVisible] = useState(false);

  // Detect screen size changes
  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth <= 768;
      setIsMobile(mobile);
      if (!mobile) setDrawerVisible(false); // Close sidebar on desktop resize
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // ðŸ”¥ Prevent flicker: Only render once `isMobile` is determined
  if (isMobile === null) return null;

  // Handle avatar click
  const handleAvatarClick = () => {
    if (collapsed) {
      setDropdownVisible((prev) => !prev);
    }
  };

  {/* Reusable Avatar Dropdown */}
  const avatarDropdown = (
    <Dropdown 
      menu={{ items }} 
      trigger={['click']} 
      open={dropdownVisible} 
      onOpenChange={setDropdownVisible}
      overlayStyle={{ minWidth: '160px' }} 
      getPopupContainer={() => (isMobile ? document.querySelector('.mobile-dropdown-container') : document.body)}
    >
      <div 
        className={`menu-item-isolate ${collapsed ? 'collapsed' : ''}`} 
        style={{ 
          left: collapsed ? 6 : 20, 
          position: isMobile ? 'absolute' : 'static', 
          bottom: isMobile ? 20 : 'auto', 
          width: '100%' 
        }}
      >
        <Space direction="horizontal" size={2} style={{ alignItems: 'center' }}>
          <Avatar size={40} icon={<UserOutlined />} style={{ cursor: 'pointer' }} onClick={handleAvatarClick} />
          {/* {!collapsed && <label>Hiran Karu</label>} */}
          {(!collapsed || isMobile) && <label>Hiran Karu</label>} {/* âœ… Always show label on mobile */}
        </Space>
      </div>
    </Dropdown>
  );

  
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
          <title>InsiderHub</title>
          {/* <link
            href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap"
            rel="stylesheet"
          /> */}
      </head>
      <body>
        
        <AntdRegistry>
          <ConfigProvider theme={{ ...theme, cssVar: false, token: theme.token }}>
          
                <Layout className="layout-wrapper">

                  {/* Hamburger Menu Button (Only for Mobile) */}
                  {isMobile && (
                    <Button
                      type="text"
                      icon={<MenuOutlined />}
                      onClick={() => setDrawerVisible(true)}
                      className='mobile-nav-icon'
                    />
                  )}

                  {/* Desktop Sidebar (Auto-collapse to icons-only on large screens) */}
                  {!isMobile && (
                    <Sider 
                        trigger={null}
                        width={190} // Default width when expanded
                        collapsible
                        collapsed={collapsed}
                        breakpoint="lg"
                        collapsedWidth="52"
                        onBreakpoint={(broken) => setCollapsed(broken)}  // Collapse at LG
                        style={{
                          height: "100vh",
                          position: "absolute",
                          left: 0,
                          top: 0,
                          bottom: 0,
                        }}
                    >
                      <Image
                        src={collapsed ? "/logo-short.png" : "/logo.png"}
                        alt="InsiderHub"
                        width={collapsed ? 24 : 100} // Adjust width for collapsed state
                        height={30} 
                        className="logo"
                      />
                      <LeftBar isMobile={true} onClose={() => setDrawerVisible(false)} />
                      
                    </Sider> 
                    
                  )}

                  {/* Desktop Positioning */} 
                  <div className='menu-item-isolate'
                    style={{ 
                      left: collapsed ? 6 : 20, 
                      bottom: collapsed ? 6 : 20,
                    }}
                  >
                    {!isMobile && avatarDropdown}
                  </div>


                  {/* Mobile Sidebar - Fullscreen Overlay */} 
                  {isMobile && (
                    <Drawer
                        className="mobile-nav-drawer"
                        title="Menu"
                        placement="left"
                        closable={true} // Disable default close button
                        onClose={() => setDrawerVisible(false)}
                        open={drawerVisible}
                        width="100vw" // Fullscreen width
                        headerStyle={{ display: "none" }} // Ensures the header is hidden
                        bodyStyle={{ overflow: "hidden", position: "relative" }} // Prevents scrolling inside the drawer
                    >
                          {/* Custom Close Button */}
                          <button
                            onClick={() => setDrawerVisible(false)}
                            className='close-overlay'
                          >
                            <CloseOutlined style={{ fontSize: "24px", color: "white" }} />
                          </button>

                          <Image
                            src="/logo.png"
                            alt="InsiderHub"
                            width={100}
                            height={30}
                            className="logo"
                          />
                          <LeftBar isMobile={true} onClose={() => setDrawerVisible(false)} />

                          {/* Move the Dropdown inside Drawer for mobile */}
                          <div className="mobile-dropdown-container">
                            {avatarDropdown}
                          </div>
                    </Drawer>
                  )}

                  <Layout>
                      <Content>
                        {children}
                      </Content>
                    </Layout>

                </Layout>

          </ConfigProvider>
        </AntdRegistry>
        
      </body>
    </html>
  );
}


